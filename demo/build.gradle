apply plugin: 'com.android.application'
apply plugin: 'com.chattylabs.versioning'
apply from: '../buildsystem/android.gradle'

versioning {

    tagPrefix "demo-version/"

    keywords {
        minor "[demo-feature]"
        patch "[demo-bug]", "[demo-patch]"
    }
}

android {
    defaultConfig {
        versionCode versioning.code()
        versionName versioning.name()
        applicationId "chattylabs.conversations.demo"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [HOCKEYAPP_APP_ID: "658862d7f4d34d89b96ae8356aafdb05"]
    }
    signingConfigs {
        debug {
            storeFile file("../buildsystem/debug.keystore")
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Android dependencies
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.cardview:cardview:1.0.0-beta01'
    implementation 'androidx.recyclerview:recyclerview:1.0.0-beta01'

    // Dagger
    implementation 'com.google.dagger:dagger:2.15'
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.15'
    kapt 'com.google.dagger:dagger-compiler:2.15'
    kapt 'com.google.dagger:dagger-android-processor:2.15'

    // Dependencies
    implementation 'net.hockeyapp.android:HockeySDK:5.1.0'
    implementation "com.chattylabs:android-commons:$android_commons"
    implementation project(':sdk-conversations-core')
    implementation project(':sdk-addon-android-speech')
    implementation project(':sdk-addon-google-speech')
    implementation project(':sdk-addon-amazon-speech')
}

task copySecretKey(type: Copy) {
    // Search GOOGLE_APPLICATION_CREDENTIALS on internet and ADD the Env Variable on your Machine.
    File secretKey = file "$System.env.GOOGLE_APPLICATION_CREDENTIALS"
    if ((project.hasProperty("isCi") ? project.isCi : false) || !secretKey.exists()) {
        secretKey = File.createTempFile('temp', 'file')
        secretKey.deleteOnExit()
    }
    from secretKey.getParent()
    include secretKey.getName()
    into 'src/main/res/raw'
    rename secretKey.getName(), "google_credentials.json"
}
preBuild.dependsOn(copySecretKey)